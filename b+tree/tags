!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/loulou/data-structures/f+tree/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
BPT_TREE	bplustree.h	/^#define BPT_TREE$/;"	d
Bplustree	bplustree.h	/^struct Bplustree$/;"	s
FALSE	bplustree.h	/^#define FALSE /;"	d
Node	bplustree.h	/^struct Node$/;"	s
TRUE	bplustree.h	/^#define TRUE /;"	d
add_leaf	bplustree.c	/^struct Node *add_leaf(struct Node *node, size_t element)$/;"	f	typeref:struct:Node *
add_leaf_full	bplustree.c	/^struct Node *add_leaf_full(struct Node *node, size_t element)$/;"	f	typeref:struct:Node *
all	Makefile	/^all:$/;"	t
allocate_childrens	bplustree.c	/^void allocate_childrens(struct Node *node)$/;"	f	typeref:typename:void
array_insert_node	bplustree.c	/^void array_insert_node($/;"	f	typeref:typename:void
array_insert_size_t	bplustree.c	/^void array_insert_size_t($/;"	f	typeref:typename:void
aux_export	bplustree.c	/^void aux_export(FILE *dotfile, struct Node *bpt, int id)$/;"	f	typeref:typename:void
binary_search	bplustree.c	/^size_t binary_search(size_t to_add, size_t *list, size_t nb_elements)$/;"	f	typeref:typename:size_t
bptree_new	bplustree.c	/^struct Bplustree *bptree_new(size_t order)$/;"	f	typeref:struct:Bplustree *
cas	bplustree.h	/^    char cas;$/;"	m	struct:s_insert	typeref:typename:char
childrens	bplustree.h	/^    struct Node **childrens;$/;"	m	struct:Node	typeref:struct:Node **
clear	Makefile	/^clear:$/;"	t
display	bplustree.c	/^void display(struct Bplustree *bpt)$/;"	f	typeref:typename:void
export	bplustree.c	/^void export(struct Bplustree *bpt, char *path)$/;"	f	typeref:typename:void
has_childs	bplustree.c	/^int has_childs(struct Node *node)$/;"	f	typeref:typename:int
insert	bplustree.c	/^void insert(struct Bplustree *bpt, size_t element)$/;"	f	typeref:typename:void
main	main.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
nb_childrens	bplustree.h	/^    size_t nb_childrens;$/;"	m	struct:Node	typeref:typename:size_t
nb_values	bplustree.h	/^    size_t nb_values;$/;"	m	struct:Node	typeref:typename:size_t
new_child	bplustree.h	/^    struct Node *new_child;$/;"	m	struct:s_insert	typeref:struct:Node *
node_insert	bplustree.c	/^struct Node *node_insert(struct Node *node, size_t element)$/;"	f	typeref:struct:Node *
node_new	bplustree.c	/^struct Node *node_new(size_t order)$/;"	f	typeref:struct:Node *
order	bplustree.h	/^    size_t order;$/;"	m	struct:Bplustree	typeref:typename:size_t
order	bplustree.h	/^    size_t order;$/;"	m	struct:Node	typeref:typename:size_t
root	bplustree.h	/^    struct Node *root;$/;"	m	struct:Bplustree	typeref:struct:Node *
s_insert	bplustree.h	/^struct s_insert$/;"	s
value_to_add	bplustree.h	/^    size_t value_to_add;$/;"	m	struct:s_insert	typeref:typename:size_t
values	bplustree.h	/^    size_t *values;$/;"	m	struct:Node	typeref:typename:size_t *
